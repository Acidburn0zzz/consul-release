try {
    $LOG_DIR="/var/vcap/sys/log/consul_agent_windows"
    $DATA_DIR="/var/vcap/data/consul_agent_windows"
    $CONF_DIR="/var/vcap/jobs/consul_agent_windows/config"
    $CERT_DIR="$CONF_DIR/certs"
    New-Item -ItemType Directory -Force -Path "${LOG_DIR}"
    New-Item -ItemType Directory -Force -Path "${DATA_DIR}"
    New-Item -ItemType Directory -Force -Path "${CONF_DIR}"
    New-Item -ItemType Directory -Force -Path "${CERT_DIR}"
} catch {
    Write-Error "Exception (consul_agent_windows): pre-start.ps1"
    Write-Error $_.Exception.Message
    Exit 1
}
function DnsServers($interface) {
  return (Get-DnsClientServerAddress -InterfaceAlias $interface -AddressFamily ipv4 -ErrorAction Stop).ServerAddresses
}
try {
    [array]$routeable_interfaces = Get-WmiObject Win32_NetworkAdapterConfiguration | Where { $_.IpAddress -AND ($_.IpAddress | Where { $addr = [Net.IPAddress] $_; $addr.AddressFamily -eq "InterNetwork" -AND ($addr.address -BAND ([Net.IPAddress] "255.255.0.0").address) -ne ([Net.IPAddress] "169.254.0.0").address }) }
    $ifindex = $routeable_interfaces[0].Index
    $interface = (Get-WmiObject Win32_NetworkAdapter | Where { $_.DeviceID -eq $ifindex }).netconnectionid
    $servers = DnsServers($interface)
    if($servers[0] -eq "127.0.0.1")
    {
        Write-Host "DNS Servers are set correctly."
    }
    else
    {
        Write-Host "Setting DNS Servers"
        $newDNS = @("127.0.0.1") + $servers
        Write-Host $newDNS
        Set-DnsClientServerAddress -InterfaceAlias $interface -ServerAddresses ($newDNS -join ",")
        $servers = DnsServers($interface)
        if($servers[0] -ne "127.0.0.1") {
            Write-Error "Failed to set the DNS Servers"
            Exit 1
        }
    }
} catch {
    Write-Error "Exception (consul_agent_windows): pre-start.ps1"
    Write-Error $_.Exception.Message
    Exit 1
}
try {
    if (@(Get-DnsClientCache).Count -ne 0) {
        Clear-DnsClientCache
        if (@(Get-DnsClientCache).Count -ne 0) {
            Write-Error "Failed to clear DNS Client Cache"
            Exit 1
        }
    }
} catch {
    Write-Error "Exception (consul_agent_windows): pre-start.ps1"
    Write-Error $_.Exception.Message
    Exit 1
}
try {
    $RegistryPath = "HKLM:\SYSTEM\CurrentControlSet\Services\Dnscache\Parameters"
    $ExpectedValue = 0
    $Value = Get-ItemProperty -Path $RegistryPath
    if ($Value.MaxNegativeCacheTtl -ne $ExpectedValue) {
        Set-ItemProperty -Path $RegistryPath -Name MaxNegativeCacheTtl -Value $ExpectedValue -Type DWord
        $Value = Get-ItemProperty -Path $RegistryPath
        if ($Value.MaxNegativeCacheTtl -ne $ExpectedValue) {
            Write-Error "Error: Expected MaxNegativeCacheTtl to be '${ExpectedValue}', got '${Value.MaxNegativeCacheTtl}'"
            Exit 1
        }
    }
} catch {
    Write-Error "Exception (consul_agent_windows): pre-start.ps1"
    Write-Error $_.Exception.Message
    Exit 1
}
Exit 0
